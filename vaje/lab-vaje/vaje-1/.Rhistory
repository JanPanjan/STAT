grep(value = T, x = s, pattern = "^[$csv]")
s <- c("po.csv", "pos")
grep(value = T, x = s, pattern = "^[$csv]")
s <- c("po.csv", "po")
grep(value = T, x = s, pattern = "^[$csv]")
# function to read files
read_files <- \(name) {
name <- as.character(name)
if (grep(pattern = ".csv", x = name)) {
name <- sub("\\.csv$", "", name)
}
read.csv(file = paste0(default_path, name, ".csv"))
}
# list for files
files <- vector(mode = "list", length = 4)
# function to read files
read_files <- \(name) {
name <- as.character(name)
if (grep(pattern = ".csv", x = name)) {
name <- sub("\\.csv$", "", name)
}
read.csv(file = paste0(default_path, name, ".csv"))
}
files[0] <- read_files("pokemon")
# function to read files
read_files <- \(name) {
name <- as.character(name)
if (grep(pattern = "csv", x = name)) {
name <- sub("\\.csv$", "", name)
}
read.csv(file = paste0(default_path, name, ".csv"))
}
files[0] <- read_files("pokemon")
grep(pattern = "csv", x = "pokemon")
grep(pattern = "csv", x = "pokemon.csv")
# function to read files
read_files <- \(name) {
name <- as.character(name)
if (grep(pattern = "csv", x = name)) {
name <- sub("\\.csv$", "", name)
} else {
next
}
read.csv(file = paste0(default_path, name, ".csv"))
}
files[0] <- read_files("pokemon")
# function to read files
read_files <- \(name) {
name <- as.character(name)
if (grepl(pattern = "csv", x = name) == TRUE) {
name <- sub("\\.csv$", "", name)
}
read.csv(file = paste0(default_path, name, ".csv"))
}
grepl(pattern = "csv", x = "pokemon.csv")
files[0] <- read_files("pokemon")
files[0]
files[0]
read_files("pokemon")
files
files[[0]] <- read_files("pokemon")
files[[1]] <- read_files("pokemon")
files[[1]]
files
pokemon_df <- read_files("pokemon")
moves_df <- readFiles("moves")
list.files()
list.files(default_path)
types_df <- readFiles("types")
types_df <- read_files("types")
moves_df <- read_files("moves")
moves_can_learn_df <- read_files("moves_can_learn")
moves_type_df <- read_file("moves_type")
moves_type_df <- read_files("moves_type")
pokemon_df %>% as_tibble()
pokemon_df %>% str()
# filter data
pokemon_df %>% str()
pokemon <- filter(pokemon_df, Generation==3) %>% str()
pokemon <- filter(pokemon_df, Generation==3) %>%
select(Name, contains("Type"), Total:Speed); str(pokemon)
# moves
str(moves_df)
moves <- filter(Introducted_in == 3)
moves %>% names()
moves <- filter(moves_df, Introducted_in == 3)
moves
# moves
str(moves_df)
moves <- filter(moves_df, Introducted_in == 3); str(moves)
# moves
names(moves)
# moves
moves <- filter(moves_df, Introducted_in == 3) %>%
select(!c(Introducted_in,Prob.....))
str(moves)
str(moves_type_df)
str(moves_can_learn_df)
# join dfs
head(moves,6)
# join dfs
as_tibble(moves,6)
# join dfs
as_tibble(moves)
as_tibble(moves_can_learn_df)
as_tibble(moves_type_df)
as_tibble(pokemon)
head(moves_df, 20) -> m1
head(moves_type_df, 20) -> m2
inner_join(m1, m2, Name==Name)
m1
# join dfs
as_tibble(moves)
head(moves, 20) -> m1
# join dfs
as_tibble(moves)
as_tibble(moves_type_df)
inner_join(m1, m2, by = Name)
inner_join(m1, m2)
head(moves, 20) -> m1; m1
head(moves_type_df, 20) -> m2; m2
inner_join(m1, m2)
m1
head(moves, 20) -> m1; m1 %>% as_tibble()
head(moves_type_df, 20) -> m2; m2 %>% as_tibble()
head(moves, 20) -> m1; m1 %>% as_tibble()
head(moves_can_learn_df, 20) -> m2; m2 %>% as_tibble()
inner_join(m1, m2)
inner_join(m1, m2, join_by(Name==Move))
inner_join(m1, m2, join_by(Name==Move)) %>% as_tibble()
head(moves, 100) -> m1; m1 %>% as_tibble()
head(moves_can_learn_df, 100) -> m2; m2 %>% as_tibble()
inner_join(m1, m2, join_by(Name==Move)) %>% as_tibble()
as_tibble(pokemon)
head(pokemon, 100) -> p1; p1 %>% as_tibble()
inner_join(m1, m2, join_by(Name==Move)) -> m3
inner_join(m1, m2, join_by(Name==Move)) -> m3; m3 %>% as_tibble()
head(pokemon, 100) -> p1; p1 %>% as_tibble()
inner_join(m3, p1, join_by(Pokemon==Name))
cross_join(m3, p1, join_by(Pokemon==Name))
full_join(m3, p1, join_by(Pokemon==Name))
full_join(m3, p1, join_by(Pokemon==Name)) %>% as_tibble()
head(pokemon, 100) -> p1; p1 %>% as_tibble()
rename(pokemon, Pokemon=Name)
rename(pokemon, Pokemon=Name) %>% as_tibble()
rename(pokemon, Pokemon=Name) -> p1
merge(m3, p1, by = "Pokemon", all = TRUE)
merge(m3, p1, by = "Pokemon", all = TRUE) %>% as_tibble()
full_join(m3, p1)
full_join(m3, p1) %>% as_tibble()
full_join(m3, p1, join_by(Pokemon==Pokemon)) %>% as_tibble()
head(p1, 100) -> p1; as_tibble(p1)
head(p1, 100) -> p1; as_tibble(p1) %>% filter(Pokemon=="Zubat")
head(p1, 100) -> p1; as_tibble(p1) %>% filter(p1, Pokemon=="Zubat")
filter(p1, Pokemon=="Zubat")
rename(pokemon, Pokemon=Name) -> p1
filter(p1, Pokemon=="Zubat")
head(p1, 100) -> p1; p1 %>% as_tibble()
head(p1, 100) -> p1; p1 %>% filter(Pokemon == "Zubat")
inner_join(moves, moves_can_learn_df, join_by(Name==Move)) %>% as_tibble()
inner_join(moves, moves_can_learn_df, join_by(Name==Move)) -> m; m %>% as_tibble()
rename(pokemon, Pokemon=Name) -> p1; p1 %>% as_tibble()
p1 %>% filter(Pokemon == "Zubat")
# moves
moves <- filter(moves_df, Introducted_in == 3) %>%
select(!Prob.....)
# pokemon dataframe
# filter data FOR GEN 3
str(pokemon)
# pokemon dataframe
# filter data FOR GEN 3
str(pokemon_df)
select(Name, contains("Type"), Total:Speed); pokemon %>% as_tibble()
pokemon <- filter(Type1 != "Fairy" | Type2 != "Fairy")
pokemon_df <- read_files("pokemon")
# pokemon dataframe
# filter data FOR GEN 3
str(pokemon_df)
pokemon <- filter(Type1 != "Fairy" | Type2 != "Fairy")
pokemon <- filter(pokemon_df, Type1 != "Fairy" | Type2 != "Fairy")
pokemon <- filter(pokemon_df, Type1 != "Fairy" | Type2 != "Fairy") %>%
select(Name, contains("Type"), Total:Speed); pokemon %>% as_tibble()
pokemon <- filter(pokemon_df, Type1 != "Fairy" | Type2 != "Fairy") %>%
select(Name, contains("Type"), Total:Speed) %>%
rename(Pokemon = Name); pokemon %>% as_tibble()
# moves
moves <- select(!Prob.....)
# moves
moves <- select(!Prob.....); str(moves)
str(moves)
moves_df <- read_files("moves")
# moves
moves <- select(moves_df, !Prob.....); moves %>% as_tibble()
# moves
moves <- select(moves_df, !Prob.....); moves %>% str()
str(moves_can_learn_df)
write.csv(pokemon, file = "pokemon2.csv", sep = ",")
write_excel_csv(pokemon, file = "pokemon2.csv")
read.csv("pokemon2.csv") %>% str()
dir("pokemon2.csv", recursive = TRUE)
plot(cars)
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
Commander()
install.packages("Rcmdr")
Commander()
library(Rcmdr)
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
setwd("~/progAAAAAAA/statistika/vaje/lab-vaje/vaje-1")
setwd("C:/Users/joene/Documents/progAAAAAAA/statistika/vaje/lab-vaje/vaje-1/")
data <- read.table("files/data.txt",
header = T,
stringsAsFactors = T,
sep = "\t",
na.strings = "NA",
dec = ".",
strip.white = T)
data
with(data, Hist(Sport..hours.per.week.))
```{r echo=FALSE}
# include this code chunk as-is to set options
knitr::opts_chunk$set(comment=NA, prompt=TRUE, out.width=750, fig.height=8, fig.width=8)
library(Rcmdr)
library(Rcmdr)
library(car)
library(RcmdrMisc)
with(data, Hist(Sport..hours.per.week.))
with(data, Hist(Sport..hours.per.week., scale = "frequency"))
with(data, Hist(Sport..hours.per.week.))
with(data, Hist(Sport..hours.per.week., scale = "frequency"))
with(data, Hist(Sport..hours.per.week.,
scale = "frequency",
breaks = "Sturges"))
with(data, Hist(Sport..hours.per.week.,
scale = "frequency",
breaks = "Sturges",
col = "blue"))
with(data, Hist(Sport..hours.per.week.,
scale = "frequency",
breaks = "Sturges",
col = "darkgray"))
hist
help hist
hist help
Hist
?Hist
with(data, Hist(Sport..hours.per.week., scale = "frequency", groups = smoking))
with(data, Hist(Sport..hours.per.week., scale = "frequency", groups = Smoking))
with(data, Hist(Sport..hours.per.week.,
scale = "frequency",
groups = Smoking,
breaks = "sturges"))
with(data, Hist(Sport..hours.per.week.,
scale = "frequency",
groups = Smoking,
)
)
with(data, Hist(Sport..hours.per.week.,
scale = "frequency",
groups = Smoking,
breaks = "Sturges"
)
)
with(data, Hist(Sport..hours.per.week., groups=Smoking,
scale="frequency", breaks="Sturges", col="darkgray"))
View(data)
with(data, Hist(Sport..hours.per.week.,
scale = "frequency",
groups = Videogames,
breaks = "Sturges"
)
)
with(data, Hist(Sport..hours.per.week.,
scale = "frequency",
groups = Videogames,
breaks = "Sturges"
)
)
with(data, Hist(Weight,
scale = "frequency",
groups = Sex,
)
)
with(data, Hist(Weight,
scale = "frequency",
groups = Sex,
)
)
with(data, Barplot(Videogames,
by = Sex,
))
with(data, Barplot(Videogames,
by = Sex,
style = "divided"))
with(data, Barplot(Videogames,
by = Sex,
style = "parallel"))
# include this code chunk as-is to set options
knitr::opts_chunk$set(comment=NA, prompt=TRUE, out.width=750, fig.height=8, fig.width=8)
library(Rcmdr)
library(car)
library(RcmdrMisc)
setwd("C:/Users/joene/Documents/progAAAAAAA/statistika/vaje/lab-vaje/vaje-1/")
with(data, Barplot(Videogames,
by = Sex,
style = "parallel",
xlab = "Videogames",
ylab = "Frequency",
label.bars = T,
legend.pos = "right")) # default legend position: above
with(data, Barplot(Videogames,
by = Sex,
style = "parallel",
xlab = "Videogames",
ylab = "Frequency",
label.bars = T,
legend.pos = "center")) # default legend position: above
with(data, Barplot(Videogames,
by = Sex,
style = "parallel",
xlab = "Videogames",
ylab = "Frequency",
label.bars = T,
legend.pos = "left")) # default legend position: above
with(data, Barplot(Videogames,
by = Sex,
style = "parallel",
xlab = "Videogames",
ylab = "Frequency",
label.bars = T,
legend.pos = "top")) # default legend position: above
with(data, Barplot(Videogames,
by = Sex,
style = "parallel",
xlab = "Videogames",
ylab = "Frequency",
label.bars = T,
legend.pos = "rigthtop")) # default legend position: above
with(data, Barplot(Videogames,
by = Sex,
style = "parallel",
xlab = "Videogames",
ylab = "Frequency",
label.bars = T,
legend.pos = "toprigth")) # default legend position: above
with(data, Barplot(Videogames,
by = Sex,
style = "parallel",
xlab = "Videogames",
ylab = "Frequency",
label.bars = T,
legend.pos = "topright"))
library(colorspace)
with(data, piechart(Eye.color,
))
with(data, piechart(Eye.Color,
))
with(data, piechart(Eye.Color,
main = "Eye.Color"))
with(data, piechart(Eye.Color,
main = "Eye.color",
col = rainbow_hcl(1)))
with(data, piechart(Eye.Color,
main = "Eye.color",
col = rainbow_hcl(2)))
with(data, piechart(Eye.Color,
main = "Eye.color",
col = rainbow_hcl(5)))
names(data)
data
data$Eye.Color
length(unique(data$Eye.Color))
# funkcija rainow_hcl sprejme integer, ki pomeni število različnih
# števil, ki naj jih naredi v plotu. Ker hočemo, da ima vsak atribut
# svojo barvo, moramo najti število različnih atributov
num_of_colors <- length(unique(data$Eye.Color))
with(data, piechart(Eye.Color,
main = "Eye.color",
col = rainbow_hcl(num_of_colors)))
with(data, piechart(Eye.Color,
main = "Eye.color",
col = rainbow_hcl(num_of_colors),
scale = "percent"))
with(data, piechart(Eye.Color,
main = "Eye.color",
col = rainbow_hcl(num_of_colors),
scale = "frequency"))
with(data, piechart(Eye.Color,
main = "Eye.color",
col = rainbow_hcl(num_of_colors),
scale = "none"))
with(data, Barplot(Eye.color,
by = Sex,
style = "parallel"))
with(data, Barplot(Eye.Color,
by = Sex,
style = "parallel"))
with(data, Barplot(Eye.Color,
by = Sex,
style = "divided"))
with(data, Barplot(Eye.Color,
by = Sex,
style = "parallel"))
with(data, Barplot(Eye.Color,
by = Sex,
style = "parallel",
label.bars = T))
with(data, Barplot(Eye.Color,
style = "parallel",
label.bars = T))
with(data, Barplot(Eye.Color,
by = Sex,
label.bars = T))
```{r}
with(data, Barplot(Eye.Color,
label.bars = T))
palette()
palette()
palette()
sample(pallete(), 5, replace = F)
sample(palette(), 5, replace = F)
sample(palette(), 5, replace = F)
sample(palette(), 5, replace = F)
sample(palette(), 5, replace = F)
sample(palette(), 5, replace = F)
sample(palette(), 5, replace = F)
# npr. izberemo 5 naključnih barv s sample
with(data, piechart(Eye.Color,
main = "Eye.color",
col = palette()[sample(palette(), 5, replace = F)],
scale = "frequency"))
# npr. izberemo 5 naključnih barv s sample
with(data, piechart(Eye.Color,
main = "Eye.color",
col = palette()[sample(palette(), 5, replace = F)],
scale = "frequency"))
Default za scale je `percent`, `frequency` vrne navadne frekvence, `none` vrne samo imena atributov.
# npr. izberemo 5 naključnih barv s sample
barve <- sample(palette(), 5, replace = F):sample(palette(), 5, replace = F)
# npr. izberemo 5 naključnih barv s sample
barve <- palette[sample(palette(), 5, replace = F):sample(palette(), 5, replace = F)]
# npr. izberemo 5 naključnih barv s sample
barve <- palette()[sample(palette(), 5, replace = F):sample(palette(), 5, replace = F)]
barve
# npr. izberemo 5 naključnih barv s sample
barve <- palette()[sample(palette(), 5, replace = F):sample(palette(), 5, replace = F)]
# npr. izberemo 5 naključnih barv s sample
length(palette())
sample(1:10, 1)
sample(1:10, 1)
sample(n, 1)
# npr. izberemo 5 naključnih barv s sample
n <- length(palette())
sample(n, 1)
sample(n, 1)
sample(n, 1)
sample(n, 1)
sample(n, 1)
with(data, piechart(Eye.Color,
main = "Eye.color",
col = palette()[1:5],
scale = "frequency"))
with(data, piechart(Eye.Color,
main = "Eye.color",
col = palette()[2:6],
scale = "frequency"))
scatterplot(Weight~Height)
scatterplot(data, Weight~Height)
scatterplot(data = data, x = Weight, y = Height)
scatterplot(Weight~Height, regLine=FALSE, smooth=FALSE, boxplots=FALSE, data=my.data)
scatterplot(Weight~Height, regLine=FALSE, smooth=FALSE, boxplots=FALSE, data=data)
scatterplot(Weight~Height, data = data)
scatterplot(Weight~Height, data = data,
regLine = F,
boxplots = F,
smooth = F)
scatterplot(Weight~Height, data = data,
boxplots = F,
smooth = F)
scatterplot(Weight~Height, data = data,
regLine = F,
boxplots = F,
)
scatterplot(Weight~Height, data = data, regLine = F)
scatterplot(Weight~Height, data = data, regLine = F, boxplots = F)
scatterplot(Weight~Height, data = data,
regLine = F,
boxplots = F,
smooth = F)
summary(data)
class(summary(data))
summary(data)
names(summary(data))
colnames(summary(data))
summary(data)$Age
summary(data)["Age"]
summary(data)[, "Age"]
colnames(summary(data))
summary(data)
